name: Release ClusterEye Agent

on:
  push:
    tags:
      - 'v*' # v1.0.0 gibi tag'ler için

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build for AMD64
        run: |
          mkdir -p build
          # Doğrudan main.go dosyasını değil, tüm paketi derle
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o build/clustereye-agent-linux-amd64 ./cmd/agent
          
      - name: Build for ARM64
        run: |
          # Doğrudan main.go dosyasını değil, tüm paketi derle
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o build/clustereye-agent-linux-arm64 ./cmd/agent

      - name: Copy config example
        run: |
          mkdir -p build
          cp cmd/agent/agent.yml.example build/
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          
      - name: Upload Linux AMD64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/clustereye-agent-linux-amd64
          asset_name: clustereye-agent-linux-amd64
          asset_content_type: application/octet-stream
          
      - name: Upload Linux ARM64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/clustereye-agent-linux-arm64
          asset_name: clustereye-agent-linux-arm64
          asset_content_type: application/octet-stream
          
      - name: Upload Config Example Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/agent.yml.example
          asset_name: agent.yml.example
          asset_content_type: text/yaml 